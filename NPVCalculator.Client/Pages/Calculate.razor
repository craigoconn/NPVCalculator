@using NPVCalculator.Client.Interfaces
@using NPVCalculator.Shared.Models
@using NPVCalculator.Client.Services
@using NPVCalculator.Client.Models
@page "/"
@page "/calculate"
@inject INpvService NpvService
@inject IInputValidationService InputValidator
@inject IChartService ChartService

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <NpvInputForm Model="@model" 
                         OnCalculate="@HandleCalculate" 
                         IsCalculating="@isCalculating" 
                         Errors="@errors" />
        </div>
        <div class="col-md-6">
            <NpvResults Results="@results" />
        </div>
    </div>
    
    @if (results?.Any() == true)
    {
        <div class="row mt-4">
            <div class="col-12">
                <NpvChart Results="@results" />
            </div>
        </div>
    }
</div>

@code {
    private NpvInputModel model = new();
    private List<NpvResult>? results;
    private List<string> errors = [];
    private bool isCalculating = false;

    private async Task HandleCalculate(NpvInputModel inputModel)
    {
        errors.Clear();
        isCalculating = true;

        try
        {
            var validationResult = InputValidator.ValidateInput(inputModel);
            if (!validationResult.IsValid)
            {
                errors.AddRange(validationResult.Errors);
                return;
            }

            var request = inputModel.ToNpvRequest();
            var response = await NpvService.CalculateNpvAsync(request);

            if (response.IsSuccess)
            {
                results = response.Data;
            }
            else
            {
                errors.AddRange(response.Errors ?? []);
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }
        finally
        {
            isCalculating = false;
            StateHasChanged();
        }
    }
}